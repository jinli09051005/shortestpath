/*
Copyright (C) 2024 JinLi Co.,Ltd. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "jinli.io/shortestpath/pkg/apis/dijkstra/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DisplayLister helps list Displays.
// All objects returned here must be treated as read-only.
type DisplayLister interface {
	// List lists all Displays in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Display, err error)
	// Displays returns an object that can list and get Displays.
	Displays(namespace string) DisplayNamespaceLister
	DisplayListerExpansion
}

// displayLister implements the DisplayLister interface.
type displayLister struct {
	indexer cache.Indexer
}

// NewDisplayLister returns a new DisplayLister.
func NewDisplayLister(indexer cache.Indexer) DisplayLister {
	return &displayLister{indexer: indexer}
}

// List lists all Displays in the indexer.
func (s *displayLister) List(selector labels.Selector) (ret []*v1.Display, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Display))
	})
	return ret, err
}

// Displays returns an object that can list and get Displays.
func (s *displayLister) Displays(namespace string) DisplayNamespaceLister {
	return displayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DisplayNamespaceLister helps list and get Displays.
// All objects returned here must be treated as read-only.
type DisplayNamespaceLister interface {
	// List lists all Displays in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Display, err error)
	// Get retrieves the Display from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Display, error)
	DisplayNamespaceListerExpansion
}

// displayNamespaceLister implements the DisplayNamespaceLister
// interface.
type displayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Displays in the indexer for a given namespace.
func (s displayNamespaceLister) List(selector labels.Selector) (ret []*v1.Display, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Display))
	})
	return ret, err
}

// Get retrieves the Display from the indexer for a given namespace and name.
func (s displayNamespaceLister) Get(name string) (*v1.Display, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("display"), name)
	}
	return obj.(*v1.Display), nil
}
