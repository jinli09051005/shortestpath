/*
Copyright (C) 2024 JinLi Co.,Ltd. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	dijkstra "jinli.io/shortestpath/pkg/apis/dijkstra"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KnownNodesLister helps list KnownNodeses.
// All objects returned here must be treated as read-only.
type KnownNodesLister interface {
	// List lists all KnownNodeses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*dijkstra.KnownNodes, err error)
	// KnownNodeses returns an object that can list and get KnownNodeses.
	KnownNodeses(namespace string) KnownNodesNamespaceLister
	KnownNodesListerExpansion
}

// knownNodesLister implements the KnownNodesLister interface.
type knownNodesLister struct {
	indexer cache.Indexer
}

// NewKnownNodesLister returns a new KnownNodesLister.
func NewKnownNodesLister(indexer cache.Indexer) KnownNodesLister {
	return &knownNodesLister{indexer: indexer}
}

// List lists all KnownNodeses in the indexer.
func (s *knownNodesLister) List(selector labels.Selector) (ret []*dijkstra.KnownNodes, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*dijkstra.KnownNodes))
	})
	return ret, err
}

// KnownNodeses returns an object that can list and get KnownNodeses.
func (s *knownNodesLister) KnownNodeses(namespace string) KnownNodesNamespaceLister {
	return knownNodesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KnownNodesNamespaceLister helps list and get KnownNodeses.
// All objects returned here must be treated as read-only.
type KnownNodesNamespaceLister interface {
	// List lists all KnownNodeses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*dijkstra.KnownNodes, err error)
	// Get retrieves the KnownNodes from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*dijkstra.KnownNodes, error)
	KnownNodesNamespaceListerExpansion
}

// knownNodesNamespaceLister implements the KnownNodesNamespaceLister
// interface.
type knownNodesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KnownNodeses in the indexer for a given namespace.
func (s knownNodesNamespaceLister) List(selector labels.Selector) (ret []*dijkstra.KnownNodes, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*dijkstra.KnownNodes))
	})
	return ret, err
}

// Get retrieves the KnownNodes from the indexer for a given namespace and name.
func (s knownNodesNamespaceLister) Get(name string) (*dijkstra.KnownNodes, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(dijkstra.Resource("knownnodes"), name)
	}
	return obj.(*dijkstra.KnownNodes), nil
}
