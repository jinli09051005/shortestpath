package v1

import (
	"fmt"

	dijkstra "jinli.io/shortestpath/pkg/apis/dijkstra"
	conversion "k8s.io/apimachinery/pkg/conversion"
	"k8s.io/apimachinery/pkg/runtime"
)

func addConversionFuncs(scheme *runtime.Scheme) error {
	funcs := []func(scheme *runtime.Scheme) error{
		AddFieldLabelConversionForKnownNodes,
		AddFieldLabelConversionForDisplay,
	}
	for _, f := range funcs {
		if err := f(scheme); err != nil {
			return err
		}
	}

	return nil
}

// AddFieldLabelConversionForKnownNodes adds a conversion function to convert
// field selectors of KnownNodes from the given version to internal version
// representation.
func AddFieldLabelConversionForKnownNodes(scheme *runtime.Scheme) error {
	return scheme.AddFieldLabelConversionFunc(SchemeGroupVersion.WithKind("KnownNodes"),
		func(label, value string) (string, string, error) {
			switch label {
			case "spec.nodeIdentity",
				"spec.nodes",
				"metadata.namespace",
				"metadata.name":
				return label, value, nil
			default:
				return "", "", fmt.Errorf("field label not supported: %s", label)
			}
		})
}

// AddFieldLabelConversionForDisplay adds a conversion function to convert
// field selectors of Display from the given version to internal version
// representation.
func AddFieldLabelConversionForDisplay(scheme *runtime.Scheme) error {
	mapping := map[string]string{
		"spec.nodeIdentity":  "spec.nodeIdentity",
		"spec.startNode":     "spec.startNode",
		"spec.targetNodes":   "spec.targetNodes",
		"metadata.namespace": "metadata.namespace",
		"metadata.name":      "metadata.name",
	}
	return scheme.AddFieldLabelConversionFunc(SchemeGroupVersion.WithKind("Display"),
		func(label, value string) (string, string, error) {
			mappedLabel, ok := mapping[label]
			if !ok {
				return "", "", fmt.Errorf("field label not supported: %s", label)
			}
			return mappedLabel, value, nil
		},
	)
}

// Convert_v1_DisplaySpec_To_dijkstra_DisplaySpec is an autogenerated conversion function.
func Convert_v1_DisplaySpec_To_dijkstra_DisplaySpec(in *DisplaySpec, out *dijkstra.DisplaySpec, s conversion.Scope) error {
	// v1版本没有Algorithm字段，转换为内部版本时，为内部版本Algorithm字段赋默认值
	out.Algorithm = "dijkstra"
	return autoConvert_v1_DisplaySpec_To_dijkstra_DisplaySpec(in, out, s)
}

// Convert_dijkstra_DisplaySpec_To_v1_DisplaySpec is an autogenerated conversion function.
func Convert_dijkstra_DisplaySpec_To_v1_DisplaySpec(in *dijkstra.DisplaySpec, out *DisplaySpec, s conversion.Scope) error {
	// 内部版本转为V1版本，不需要转换Algorithm字段，用生成函数就行
	return autoConvert_dijkstra_DisplaySpec_To_v1_DisplaySpec(in, out, s)
}

// Convert_v1_DisplayStatus_To_dijkstra_DisplayStatus is an autogenerated conversion function.
func Convert_v1_DisplayStatus_To_dijkstra_DisplayStatus(in *DisplayStatus, out *dijkstra.DisplayStatus, s conversion.Scope) error {
	// v1版本没有ComputeStatus字段，转换为内部版本时，为内部版本ComputeStatus字段赋默认值
	if out.LastUpdate.IsZero() {
		out.ComputeStatus = "Wait"
	} else {
		out.ComputeStatus = "Succeed"
	}
	return autoConvert_v1_DisplayStatus_To_dijkstra_DisplayStatus(in, out, s)
}

// Convert_dijkstra_DisplayStatus_To_v1_DisplayStatus is an autogenerated conversion function.
func Convert_dijkstra_DisplayStatus_To_v1_DisplayStatus(in *dijkstra.DisplayStatus, out *DisplayStatus, s conversion.Scope) error {
	// 内部版本转为V1版本，不需要转换ComputeStatus字段，用生成函数就行
	return autoConvert_dijkstra_DisplayStatus_To_v1_DisplayStatus(in, out, s)
}
